/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as R05RefsImport } from './routes/05-refs'
import { Route as R04UseActionStateImport } from './routes/04-use-action-state'
import { Route as R03UseTransitionImport } from './routes/03-use-transition'
import { Route as R02UseOptimisticImport } from './routes/02-use-optimistic'
import { Route as R01UseImport } from './routes/01-use'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const R05RefsRoute = R05RefsImport.update({
  id: '/05-refs',
  path: '/05-refs',
  getParentRoute: () => rootRoute,
} as any)

const R04UseActionStateRoute = R04UseActionStateImport.update({
  id: '/04-use-action-state',
  path: '/04-use-action-state',
  getParentRoute: () => rootRoute,
} as any)

const R03UseTransitionRoute = R03UseTransitionImport.update({
  id: '/03-use-transition',
  path: '/03-use-transition',
  getParentRoute: () => rootRoute,
} as any)

const R02UseOptimisticRoute = R02UseOptimisticImport.update({
  id: '/02-use-optimistic',
  path: '/02-use-optimistic',
  getParentRoute: () => rootRoute,
} as any)

const R01UseRoute = R01UseImport.update({
  id: '/01-use',
  path: '/01-use',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/01-use': {
      id: '/01-use'
      path: '/01-use'
      fullPath: '/01-use'
      preLoaderRoute: typeof R01UseImport
      parentRoute: typeof rootRoute
    }
    '/02-use-optimistic': {
      id: '/02-use-optimistic'
      path: '/02-use-optimistic'
      fullPath: '/02-use-optimistic'
      preLoaderRoute: typeof R02UseOptimisticImport
      parentRoute: typeof rootRoute
    }
    '/03-use-transition': {
      id: '/03-use-transition'
      path: '/03-use-transition'
      fullPath: '/03-use-transition'
      preLoaderRoute: typeof R03UseTransitionImport
      parentRoute: typeof rootRoute
    }
    '/04-use-action-state': {
      id: '/04-use-action-state'
      path: '/04-use-action-state'
      fullPath: '/04-use-action-state'
      preLoaderRoute: typeof R04UseActionStateImport
      parentRoute: typeof rootRoute
    }
    '/05-refs': {
      id: '/05-refs'
      path: '/05-refs'
      fullPath: '/05-refs'
      preLoaderRoute: typeof R05RefsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/01-use': typeof R01UseRoute
  '/02-use-optimistic': typeof R02UseOptimisticRoute
  '/03-use-transition': typeof R03UseTransitionRoute
  '/04-use-action-state': typeof R04UseActionStateRoute
  '/05-refs': typeof R05RefsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/01-use': typeof R01UseRoute
  '/02-use-optimistic': typeof R02UseOptimisticRoute
  '/03-use-transition': typeof R03UseTransitionRoute
  '/04-use-action-state': typeof R04UseActionStateRoute
  '/05-refs': typeof R05RefsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/01-use': typeof R01UseRoute
  '/02-use-optimistic': typeof R02UseOptimisticRoute
  '/03-use-transition': typeof R03UseTransitionRoute
  '/04-use-action-state': typeof R04UseActionStateRoute
  '/05-refs': typeof R05RefsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/01-use'
    | '/02-use-optimistic'
    | '/03-use-transition'
    | '/04-use-action-state'
    | '/05-refs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/01-use'
    | '/02-use-optimistic'
    | '/03-use-transition'
    | '/04-use-action-state'
    | '/05-refs'
  id:
    | '__root__'
    | '/'
    | '/01-use'
    | '/02-use-optimistic'
    | '/03-use-transition'
    | '/04-use-action-state'
    | '/05-refs'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R01UseRoute: typeof R01UseRoute
  R02UseOptimisticRoute: typeof R02UseOptimisticRoute
  R03UseTransitionRoute: typeof R03UseTransitionRoute
  R04UseActionStateRoute: typeof R04UseActionStateRoute
  R05RefsRoute: typeof R05RefsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R01UseRoute: R01UseRoute,
  R02UseOptimisticRoute: R02UseOptimisticRoute,
  R03UseTransitionRoute: R03UseTransitionRoute,
  R04UseActionStateRoute: R04UseActionStateRoute,
  R05RefsRoute: R05RefsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/01-use",
        "/02-use-optimistic",
        "/03-use-transition",
        "/04-use-action-state",
        "/05-refs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/01-use": {
      "filePath": "01-use.tsx"
    },
    "/02-use-optimistic": {
      "filePath": "02-use-optimistic.tsx"
    },
    "/03-use-transition": {
      "filePath": "03-use-transition.tsx"
    },
    "/04-use-action-state": {
      "filePath": "04-use-action-state.tsx"
    },
    "/05-refs": {
      "filePath": "05-refs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
